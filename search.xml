<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈CAP</title>
      <link href="/post/d9f5e25f.html"/>
      <url>/post/d9f5e25f.html</url>
      
        <content type="html"><![CDATA[<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="order-订单服务"><a href="#order-订单服务" class="headerlink" title="order 订单服务"></a>order 订单服务</h3><p><a href="http://10.0.4.52:7078/swagger/index.html">http://10.0.4.52:7078/swagger/index.html</a> </p><h3 id="stock-库存服务"><a href="#stock-库存服务" class="headerlink" title="stock 库存服务"></a>stock 库存服务</h3><p><a href="http://10.0.4.52:7077/swagger/index.html">http://10.0.4.52:7077/swagger/index.html</a> </p><p>对于分布式事务，常用的解决方案根据一致性的程度可以进行如下划分：</p><p>强一致性(2PC、3PC)：数据库层面的实现，通过锁定资源，牺牲可用性，保证数据的强一致性，效率相对比较低。</p><p>弱一致性(TCC)：业务层面的实现，通过预留或锁定部分资源，最后通过确认或取消操作完成事务的处理。比如A向B转款500元，A账号会冻结500元，其他操作正常，B接收转款时，也不能直接入账，而是将500元放到预留空间，只有经过确认之后，A才正式扣钱，B才正式入账；如果取消把A的500块解冻，B也不会入账。</p><p>最终一致性(本地消息表)：不管经过多少个服务节点，最终数据一致就行。比如下单成功之后，需要库存服务扣减库存，如果库存扣减失败，不管是重试，还是最后人工处理，最后确保订单和库存数据能对上就行；为保证用户体验，及时通过中间状态的形式反馈给用户，比如常见的出票中、数据处理中等。</p><p>对于强一致性和弱一致性的解决方案一般针对数据一致性和时效性要求特别高的业务场景，通常会牺牲暂时的可用性来满足一致性的要求；由于为保证一致性，会锁定资源，在高并发的业务场景不是最佳选择，所以很多系统在业务需求允许的情况下，基本上都会采用最终一致性方案。</p><p><img src="/img/CAP01.png" alt="image"></p><ul><li>CAP 集在ASP.NET Core 微服务架构中的示意图</li></ul><h2 id="CAP：最终一致性，分布式事务解决方案。"><a href="#CAP：最终一致性，分布式事务解决方案。" class="headerlink" title="CAP：最终一致性，分布式事务解决方案。"></a>CAP：最终一致性，分布式事务解决方案。</h2><p>顾名思义就是保证数据最后的一致性就行了。如果中间节点发生失败，系统为了减少代价，一般不会自动回滚，而是通过重试机制和人工参与的方式对失败数据进行处理，从而保证系统高并发场景下高可用的数据一致性需求。</p><p>CAP 是一个EventBus(事件总线)，同时也是一个在微服务或者SOA系统中解决分布式事务问题的一个框架，基于CAP理论思想进行封装的。采用模块化设计，具有高度的可扩展性，可靠并且易于更改。<br>对于分布式事务的处理，CAP 框架采用的是“异步确保”这种方案，即本地消息表。官方支持的数据存储方式有SQL Server、MySQL、PostgreSql、MongoDB、In-Memory(内存)，由于是开源项目，社区大佬也提供了其他数据存储支持，如：Oracle、SQLite、SmartSql等。<br>在分布式系统，各节点需要进行消息传输，CAP框架提供以下几种方式RabbitMQ、Kafka、Redis Streams(Redis 5.0支持)、Azure Service Bus、Amazon SQS、In-Memory Queue，使用方式都差不多。<br>本地消息表：就是在对应业务数据库中增加的一张消息表；这张表存储业务产生的消息，通过本地事务保证业务数据和消息数据的一致性。在消息表中通过一个状态来标识业务是否执行成功，如果失败，后台任务就进行重试。</p><p>上图简要说明：<br>有两个微服务，服务A和服务B；<br>服务A中通过本地事务的方式，将事件消息和业务逻辑进行事务保存(事件消息保存在本地消息表中)，保证业务逻辑和消息的一致性和可靠性；关于消息的处理和保存CAP已经封装在内部；<br>CAP内部定时调度任务将消息发布到消息队列中；<br>服务B订阅到消息，将其保存到服务B的本地消息表中，CAP已经封装好，只需按照说明使用即可；<br>如果业务处理失败，服务B中集成的CAP会根据配置的定时任务策略进行重试，直到处理成功为止；<br>2.使用及配置说明<br>以订单服务为例：<br>首先nuget 添加 依赖包 如下：<br>DotNetCore.CAP<br>DotNetCore.CAP.Dashboard<br>DotNetCore.CAP.MySql<br>DotNetCore.CAP.RabbitMQ</p><p>然后在Startup -》ConfigureServices 注册<br><img src="/img/CAP03.png" alt="image"><br>配置作用见注释，CAP注册完毕。</p><p>业务使用代码：<br>1.跨服务一致性，以购买商品为例，新增订单（订单服务）-&gt;库存减少（库存服务）<br>订单服务：<br><img src="/img/CAP04.png" alt="image"></p><p>&lt;1&gt;.加事务的代码一般写在仓储封层，orderEntity在上面有定义图没有截全。<br>&lt;2&gt;.业务代码可以写在 _capBus.Publish 之前或之后，但一定要写在Commit 前。<br>&lt;3&gt;.使用try-catch的话一定要加Rollback 回滚。<br>&lt;4&gt;.try-catch 异常不能吞掉，一定要抛出来。</p><p>库存服务<br><img src="/img/CAP05.png" alt="image"></p><p>&lt;1&gt;.订阅一般写在Controller，可以订阅多个。<br>&lt;2&gt;.NonAction 不被识别为接口<br>&lt;3&gt;.可以继续向下发布流程，比如库存扣减成功，下一步到物流服务进行相关处理，可以继续发布消息</p><p>2.单服务一致性：新增订单报错（订单服务）<br><img src="/img/CAP06.png" alt="image"></p><p>&lt;1&gt;.Commit 提交以后sql语句才会被执行。<br>&lt;2&gt;.如果B服务需要查询A服务的新增数据，建议手动提交，不使用自动提交。</p><p>3.应用场景问题</p><p>&lt;1&gt;.人工怎么快速介入</p><p>文献：<br><a href="https://github.com/dotnetcore/CAP/blob/master/README.zh-cn.md">https://github.com/dotnetcore/CAP/blob/master/README.zh-cn.md</a> （官方）<br><a href="https://cap.dotnetcore.xyz/user-guide/zh/getting-started/quick-start/">https://cap.dotnetcore.xyz/user-guide/zh/getting-started/quick-start/</a><br><a href="https://www.cnblogs.com/savorboard/p/cap-document.html">https://www.cnblogs.com/savorboard/p/cap-document.html</a><br><a href="https://www.cnblogs.com/savorboard/p/distributed-system-transaction-consistency.html">https://www.cnblogs.com/savorboard/p/distributed-system-transaction-consistency.html</a> (分布事务理论支持，强烈推荐)</p>]]></content>
      
      
      
        <tags>
            
            <tag> CAP、Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker实战常用命令</title>
      <link href="/post/f5b22281.html"/>
      <url>/post/f5b22281.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><ul><li>安装需要的软件包</li><li>yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ul><li>设置Docker yum源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ul><li>查看所有仓库中所有docker版本 可以查看所有仓库中所有docker版本,并选择特定的版本安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure><ul><li>安装docker</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><p>由于repo中默认只开启stable仓库，故这里安装的是最新稳18.03.0.ce-1.el7.centos。<br>如果要安装特定版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce-18.06.1.ce  </span><br></pre></td></tr></table></figure><h3 id="设置为开机启动"><a href="#设置为开机启动" class="headerlink" title="设置为开机启动"></a>设置为开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="查看启动状态"><a href="#查看启动状态" class="headerlink" title="查看启动状态"></a>查看启动状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h3 id="查看运行容器"><a href="#查看运行容器" class="headerlink" title="查看运行容器"></a>查看运行容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID</span><br></pre></td></tr></table></figure><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器ID</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 容器ID</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器ID</span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f 容器ID</span><br></pre></td></tr></table></figure><p> </p><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像ID </span><br></pre></td></tr></table></figure><p>镜像加速<br>sudo mkdir -p &#x2F;etc&#x2F;docker<br>sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-‘EOF’<br>{<br>  “registry-mirrors”: [“<a href="https://bpj58bpm.mirror.aliyuncs.com"]">https://bpj58bpm.mirror.aliyuncs.com&quot;]</a><br>}<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker</p><p>日志<br>docker cp cc.tect.ms:&#x2F;app&#x2F;Logs &#x2F;tmp&#x2F;Logs.bak</p><p>docker exec -it 容器ID &#x2F;bin&#x2F;bash <br>true</p><p>docker logs –tail&#x3D;500 ccs.fat<br>sudo apt-get install vim<br> docker-compose up -d</p><p>重启网络<br>&#x2F;etc&#x2F;init.d&#x2F;network restart</p><p>启动docker：systemctl start docker<br>停止docker：systemctl stop docker<br>重启docker：systemctl restart docker<br>查看docker状态：systemctl status docker<br>开机启动：systemctl enable docker</p><p>Linux centos重启命令：<br>　　1、reboot   普通重启<br>　　2、shutdown -r now 立刻重启(root用户使用)<br>　　3、shutdown -r 10 过10分钟自动重启(root用户使用)<br>　　4、shutdown -r 20:35 在时间为20:35时候重启(root用户使用)<br>　　如果是通过shutdown命令设置重启的话，可以用shutdown -c命令取消重启<br>　Linux centos关机命令：<br>　　1、halt 立刻关机<br>　　2、poweroff 立刻关机<br>　　3、shutdown -h now 立刻关机(root用户使用)<br>　　4、shutdown -h 10 10分钟后自动关机<br>　　如果是通过shutdown命令设置关机的话，可以用shutdown -c命令取消重启</p><p>1、firewalld的基本使用<br>启动： systemctl start firewalld<br>关闭： systemctl stop firewalld<br>查看状态： systemctl status firewalld <br>开机禁用  ： systemctl disable firewalld<br>开机启用  ： systemctl enable firewalld</p><p>systemctl start docker<br>–selinux-enabled<br>&#x3D;false<br>“storage-driver”: “overlay2”,<br>“storage-opts”: [ “overlay2.override_kernel_check&#x3D;true” ]</p><p>docker info | grep “Docker Root Dir”<br>{<br>  “storage-driver”: “overlay2”,<br>  “storage-opts”: [<br>    “overlay2.override_kernel_check&#x3D;true”<br>  ]<br>}<br>rm -rf &#x2F;var&#x2F;lib&#x2F;docker<br>ln -s &#x2F;home&#x2F;docker &#x2F;var&#x2F;lib&#x2F;docker<br>history</p><h3 id="常用中间件"><a href="#常用中间件" class="headerlink" title="常用中间件"></a>常用中间件</h3><p>&#x2F;&#x2F;创建Docker镜像<br>进入发布文件夹<br>镜像名要全小写<br>docker build -t zaaby-message-bus-rabbitmq-provider-demo .<br>docker run -d –restart always -p 5001:80 –name zaaby-rabbitmq-demo zaaby-message-bus-rabbitmq-provider-demo<br>morunchang&#x2F;fastdfs<br>docker run -d –restart always –name tracker –net&#x3D;host morunchang&#x2F;fastdfs sh tracker.sh<br>docker run -d –restart always –name storage –net&#x3D;host -e TRACKER_IP&#x3D;192.168.78.152:22122 -e GROUP_NAME&#x3D;group1 morunchang&#x2F;fastdfs sh storage.sh<br>&#x2F;&#x2F;进入容器<br>docker exec -it 519d5ef67cad &#x2F;bin&#x2F;bash<br>&#x2F;&#x2F;文件保存地址<br>&#x2F;data&#x2F;fast_data&#x2F;data<br>season&#x2F;fastdfs<br>docker run -ti -d –name trakcer -v ~&#x2F;tracker_data:&#x2F;fastdfs&#x2F;tracker&#x2F;data –net&#x3D;host season&#x2F;fastdfs tracker<br>docker run -ti -d –name storage -v ~&#x2F;storage_data:&#x2F;fastdfs&#x2F;storage&#x2F;data -v ~&#x2F;store_path:&#x2F;fastdfs&#x2F;store_path –net&#x3D;host -e TRACKER_SERVER:127.0.0.1:22122 season&#x2F;fastdfs storage<br>docker run -ti -d –name fdfs_sh –net&#x3D;host season&#x2F;fastdfs sh<br>influxdb<br>docker run -d –restart always -p 8086:8086 -p 2003:2003 -p 8083:8083 -e INFLUXDB_ADMIN_ENABLED&#x3D;true –name influxdb_test influxdb<br>&#x2F;&#x2F;创建数据库<br>curl <a href="http://localhost:8086/query">http://localhost:8086/query</a> –data-urlencode “q&#x3D;CREATE DATABASE appmetricsapi”                                                                                                                                                                                                                                                                      <br>grafana<br>docker run -d –restart always -p 3000:3000 –name grafana grafana&#x2F;grafana<br>docker exec -it 4184f6af3360 &#x2F;bin&#x2F;bash<br>&#x2F;&#x2F;安装zabbix插件命令<br>grafana-cli plugins install alexanderzobnin-zabbix-app<br>rabbitmq<br>docker run -d –restart always –hostname my-rabbit –name test-rabbitmq -p 4369:4369 -p 5671:5671 -p 5672:5672 -p 15672:15672 -p 25672:25672 -p 15671:15671 -e RABBITMQ_ERLANG_COOKIE&#x3D;’secret cookie here’ rabbitmq:3-management<br>guest:guest<br>mysql<br>docker run -d –restart always -p 3306:3306 –name test-mysql -e MYSQL_ROOT_PASSWORD&#x3D;123qweasd,.&#x2F; mysql:latest<br>root:123qweasd,.&#x2F;</p><p>docker run -p 13306:3306 –name mysql -v &#x2F;data&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql -v &#x2F;data&#x2F;mysql&#x2F;logs:&#x2F;logs -v &#x2F;data&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123qweasd,.&#x2F; -d mysql:5.7</p><p>docker run -p 3306:3306 –name mysql -v &#x2F;data&#x2F;mysql&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;mysql&#x2F;my.cnf -v &#x2F;data&#x2F;mysql&#x2F;logs:&#x2F;logs -v &#x2F;data&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123qweasd,.&#x2F; -d mysql:5.7</p><p>对于自建 MySQL , 需要先开启 Binlog 写入功能，配置 binlog-format 为 ROW 模式，my.cnf 中配置如下<br>[mysqld]<br>log-bin&#x3D;mysql-bin # 开启 binlog<br>binlog-format&#x3D;ROW # 选择 ROW 模式<br>server_id&#x3D;1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复<br>注意：针对阿里云 RDS for MySQL , 默认打开了 binlog , 并且账号默认具有 binlog dump 权限 , 不需要任何权限或者 binlog 设置,可以直接跳过这一步<br>授权 canal 链接 MySQL 账号具有作为 MySQL slave 的权限, 如果已有账户可直接 grant<br>CREATE USER canal IDENTIFIED BY ‘canal’;  <br>GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON <em>.</em> TO ‘canal‘@’%’;<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘canal‘@’%’ ;<br>FLUSH PRIVILEGES;</p><p>mongodb<br>docker run -d –restart always -p 27017:27017 –name test-mongo mongo<br>–Add the Initial Admin User<br>$ docker exec -it test-mongo mongo admin<br>db.createUser({ user: ‘aaa’, pwd: ‘123’, roles: [ { role: “userAdminAnyDatabase”, db: “admin” } ] });<br>redis<br>docker run –name redis -p 6379:6379 -d –restart&#x3D;always redis:latest redis-server –appendonly yes –requirepass “redis_dev_123456”</p><p>elasticsearch<br>docker run -e ES_JAVA_OPTS&#x3D;”-Xms512m -Xmx512m” -d –restart always -p 9200:9200 -p 9300:9300 –name test-elastic elasticsearch<br>无账号密码<br>postgresql<br>docker run -d –restart always -p 5432:5432 –name test-postgres -e POSTGRES_PASSWORD&#x3D;123qweasd,.&#x2F; postgres<br>postgres:123qweasd,.&#x2F;<br>consul<br>docker run -d –name&#x3D;dev-consul -p 8300:8300 -p 8301:8301 -p 8302:8302 -p 8500:8500 -p 8600:8600 -e CONSUL_BIND_INTERFACE&#x3D;eth0 consul<br>docker run -d -e CONSUL_BIND_INTERFACE&#x3D;eth0 consul agent -dev -join&#x3D;192.168.78.152<br>展示环境中间件<br>mongodb<br>192.168.5.229:27017 无账号密码<br>mysql<br>192.168.5.229 root:123qweasd,.&#x2F;<br>rabbitmq<br>192.168.5.229 guest:guest<br>redis<br>192.168.5.55:6379 无账号密码<br>elasticsearch<br>192.168.5.229:9200 无账号密码<br>开发环境<br>rabbitmq<br>192.168.5.56:5672 无账号密码<br>管理页面<br>192.168.5.56:15672 guest:guest<br>mysql<br>192.168.5.56:3306 root:123456<br>mongo<br>192.168.5.56:27017 rootadmin:123456<br>redis<br>192.168.5.56 无账号密码<br>elasticsearch<br>192.168.5.56:9200 无账号密码</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Net7</title>
      <link href="/post/undefined.html"/>
      <url>/post/undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">专业</span><br></pre></td></tr></table></figure><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p><img src="/img/net7-02.png" alt="image"><br><img src="/img/net7-xn.png" alt="image"><br><img src="/img/net7.png" alt="image"><br><img src="/img/net7-01.png" alt="image"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/undefined.html"/>
      <url>/post/undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="01"><a href="#01" class="headerlink" title="01"></a>01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">专业</span><br></pre></td></tr></table></figure><!-- More info: [Writing](https://hexo.io/docs/writing.html) --><h3 id="02"><a href="#02" class="headerlink" title="02"></a>02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">认真</span><br></pre></td></tr></table></figure><!-- More info: [Server](https://hexo.io/docs/server.html) --><h3 id="03"><a href="#03" class="headerlink" title="03"></a>03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">耐心</span><br></pre></td></tr></table></figure><!-- More info: [Generating](https://hexo.io/docs/generating.html) --><h3 id="04"><a href="#04" class="headerlink" title="04"></a>04</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">温暖</span><br></pre></td></tr></table></figure><h3 id="图片我还有很多"><a href="#图片我还有很多" class="headerlink" title="图片我还有很多"></a>图片我还有很多</h3><p><img src="/img/net7-02.png" alt="image"><br><img src="/img/net7-xn.png" alt="image"><br><img src="/img/net7.png" alt="image"><br><img src="/img/net7-01.png" alt="image"><br><img src="/img/index-p.jpg" alt="image"><br><img src="/img/index-p2.jpg" alt="image"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
