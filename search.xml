<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker实战常用命令</title>
      <link href="/post/f5b22281.html"/>
      <url>/post/f5b22281.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><ul><li>安装需要的软件包</li><li>yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ul><li>设置Docker yum源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ul><li>查看所有仓库中所有docker版本 可以查看所有仓库中所有docker版本,并选择特定的版本安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure><ul><li>安装docker</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><p>由于repo中默认只开启stable仓库，故这里安装的是最新稳18.03.0.ce-1.el7.centos。<br>如果要安装特定版本：<br>sudo yum install docker-ce-18.06.1.ce  </p><h3 id="设置为开机启动"><a href="#设置为开机启动" class="headerlink" title="设置为开机启动"></a>设置为开机启动</h3><p>systemctl enable docker</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>systemctl start docker</p><h3 id="查看启动状态"><a href="#查看启动状态" class="headerlink" title="查看启动状态"></a>查看启动状态</h3><p>systemctl status docker</p><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><p>docker version</p><h3 id="查看运行容器"><a href="#查看运行容器" class="headerlink" title="查看运行容器"></a>查看运行容器</h3><p>docker ps</p><h3 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h3><p>docker ps -a</p><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><p>docker stop 容器ID<br>启动<br>docker start 容器ID<br>重启<br>docker restart 容器ID<br>删除<br>docker rm 容器ID<br>查看日志<br>docker logs -f 容器ID<br> <br>查看镜像<br>docker images<br>删除镜像<br>docker rmi 镜像ID <br>镜像加速<br>sudo mkdir -p &#x2F;etc&#x2F;docker<br>sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-‘EOF’<br>{<br>  “registry-mirrors”: [“<a href="https://bpj58bpm.mirror.aliyuncs.com"]">https://bpj58bpm.mirror.aliyuncs.com&quot;]</a><br>}<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker</p><p>日志<br>docker cp cc.tect.ms:&#x2F;app&#x2F;Logs &#x2F;tmp&#x2F;Logs.bak</p><p>docker exec -it 容器ID &#x2F;bin&#x2F;bash <br>true</p><p>docker logs –tail&#x3D;500 ccs.fat<br>sudo apt-get install vim<br> docker-compose up -d</p><p>重启网络<br>&#x2F;etc&#x2F;init.d&#x2F;network restart</p><p>启动docker：systemctl start docker<br>停止docker：systemctl stop docker<br>重启docker：systemctl restart docker<br>查看docker状态：systemctl status docker<br>开机启动：systemctl enable docker</p><p>Linux centos重启命令：<br>　　1、reboot   普通重启<br>　　2、shutdown -r now 立刻重启(root用户使用)<br>　　3、shutdown -r 10 过10分钟自动重启(root用户使用)<br>　　4、shutdown -r 20:35 在时间为20:35时候重启(root用户使用)<br>　　如果是通过shutdown命令设置重启的话，可以用shutdown -c命令取消重启<br>　Linux centos关机命令：<br>　　1、halt 立刻关机<br>　　2、poweroff 立刻关机<br>　　3、shutdown -h now 立刻关机(root用户使用)<br>　　4、shutdown -h 10 10分钟后自动关机<br>　　如果是通过shutdown命令设置关机的话，可以用shutdown -c命令取消重启</p><p>1、firewalld的基本使用<br>启动： systemctl start firewalld<br>关闭： systemctl stop firewalld<br>查看状态： systemctl status firewalld <br>开机禁用  ： systemctl disable firewalld<br>开机启用  ： systemctl enable firewalld</p><p>systemctl start docker<br>–selinux-enabled<br>&#x3D;false<br>“storage-driver”: “overlay2”,<br>“storage-opts”: [ “overlay2.override_kernel_check&#x3D;true” ]</p><p>docker info | grep “Docker Root Dir”<br>{<br>  “storage-driver”: “overlay2”,<br>  “storage-opts”: [<br>    “overlay2.override_kernel_check&#x3D;true”<br>  ]<br>}<br>rm -rf &#x2F;var&#x2F;lib&#x2F;docker<br>ln -s &#x2F;home&#x2F;docker &#x2F;var&#x2F;lib&#x2F;docker<br>history</p><h3 id="常用中间件"><a href="#常用中间件" class="headerlink" title="常用中间件"></a>常用中间件</h3><p>&#x2F;&#x2F;创建Docker镜像<br>进入发布文件夹<br>镜像名要全小写<br>docker build -t zaaby-message-bus-rabbitmq-provider-demo .<br>docker run -d –restart always -p 5001:80 –name zaaby-rabbitmq-demo zaaby-message-bus-rabbitmq-provider-demo<br>morunchang&#x2F;fastdfs<br>docker run -d –restart always –name tracker –net&#x3D;host morunchang&#x2F;fastdfs sh tracker.sh<br>docker run -d –restart always –name storage –net&#x3D;host -e TRACKER_IP&#x3D;192.168.78.152:22122 -e GROUP_NAME&#x3D;group1 morunchang&#x2F;fastdfs sh storage.sh<br>&#x2F;&#x2F;进入容器<br>docker exec -it 519d5ef67cad &#x2F;bin&#x2F;bash<br>&#x2F;&#x2F;文件保存地址<br>&#x2F;data&#x2F;fast_data&#x2F;data<br>season&#x2F;fastdfs<br>docker run -ti -d –name trakcer -v ~&#x2F;tracker_data:&#x2F;fastdfs&#x2F;tracker&#x2F;data –net&#x3D;host season&#x2F;fastdfs tracker<br>docker run -ti -d –name storage -v ~&#x2F;storage_data:&#x2F;fastdfs&#x2F;storage&#x2F;data -v ~&#x2F;store_path:&#x2F;fastdfs&#x2F;store_path –net&#x3D;host -e TRACKER_SERVER:127.0.0.1:22122 season&#x2F;fastdfs storage<br>docker run -ti -d –name fdfs_sh –net&#x3D;host season&#x2F;fastdfs sh<br>influxdb<br>docker run -d –restart always -p 8086:8086 -p 2003:2003 -p 8083:8083 -e INFLUXDB_ADMIN_ENABLED&#x3D;true –name influxdb_test influxdb<br>&#x2F;&#x2F;创建数据库<br>curl <a href="http://localhost:8086/query">http://localhost:8086/query</a> –data-urlencode “q&#x3D;CREATE DATABASE appmetricsapi”                                                                                                                                                                                                                                                                      <br>grafana<br>docker run -d –restart always -p 3000:3000 –name grafana grafana&#x2F;grafana<br>docker exec -it 4184f6af3360 &#x2F;bin&#x2F;bash<br>&#x2F;&#x2F;安装zabbix插件命令<br>grafana-cli plugins install alexanderzobnin-zabbix-app<br>rabbitmq<br>docker run -d –restart always –hostname my-rabbit –name test-rabbitmq -p 4369:4369 -p 5671:5671 -p 5672:5672 -p 15672:15672 -p 25672:25672 -p 15671:15671 -e RABBITMQ_ERLANG_COOKIE&#x3D;’secret cookie here’ rabbitmq:3-management<br>guest:guest<br>mysql<br>docker run -d –restart always -p 3306:3306 –name test-mysql -e MYSQL_ROOT_PASSWORD&#x3D;123qweasd,.&#x2F; mysql:latest<br>root:123qweasd,.&#x2F;</p><p>docker run -p 13306:3306 –name mysql -v &#x2F;data&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql -v &#x2F;data&#x2F;mysql&#x2F;logs:&#x2F;logs -v &#x2F;data&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123qweasd,.&#x2F; -d mysql:5.7</p><p>docker run -p 3306:3306 –name mysql -v &#x2F;data&#x2F;mysql&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;mysql&#x2F;my.cnf -v &#x2F;data&#x2F;mysql&#x2F;logs:&#x2F;logs -v &#x2F;data&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123qweasd,.&#x2F; -d mysql:5.7</p><p>对于自建 MySQL , 需要先开启 Binlog 写入功能，配置 binlog-format 为 ROW 模式，my.cnf 中配置如下<br>[mysqld]<br>log-bin&#x3D;mysql-bin # 开启 binlog<br>binlog-format&#x3D;ROW # 选择 ROW 模式<br>server_id&#x3D;1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复<br>注意：针对阿里云 RDS for MySQL , 默认打开了 binlog , 并且账号默认具有 binlog dump 权限 , 不需要任何权限或者 binlog 设置,可以直接跳过这一步<br>授权 canal 链接 MySQL 账号具有作为 MySQL slave 的权限, 如果已有账户可直接 grant<br>CREATE USER canal IDENTIFIED BY ‘canal’;  <br>GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON <em>.</em> TO ‘canal‘@’%’;<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘canal‘@’%’ ;<br>FLUSH PRIVILEGES;</p><p>mongodb<br>docker run -d –restart always -p 27017:27017 –name test-mongo mongo<br>–Add the Initial Admin User<br>$ docker exec -it test-mongo mongo admin<br>db.createUser({ user: ‘aaa’, pwd: ‘123’, roles: [ { role: “userAdminAnyDatabase”, db: “admin” } ] });<br>redis<br>docker run –name redis -p 6379:6379 -d –restart&#x3D;always redis:latest redis-server –appendonly yes –requirepass “redis_dev_123456”</p><p>elasticsearch<br>docker run -e ES_JAVA_OPTS&#x3D;”-Xms512m -Xmx512m” -d –restart always -p 9200:9200 -p 9300:9300 –name test-elastic elasticsearch<br>无账号密码<br>postgresql<br>docker run -d –restart always -p 5432:5432 –name test-postgres -e POSTGRES_PASSWORD&#x3D;123qweasd,.&#x2F; postgres<br>postgres:123qweasd,.&#x2F;<br>consul<br>docker run -d –name&#x3D;dev-consul -p 8300:8300 -p 8301:8301 -p 8302:8302 -p 8500:8500 -p 8600:8600 -e CONSUL_BIND_INTERFACE&#x3D;eth0 consul<br>docker run -d -e CONSUL_BIND_INTERFACE&#x3D;eth0 consul agent -dev -join&#x3D;192.168.78.152<br>展示环境中间件<br>mongodb<br>192.168.5.229:27017 无账号密码<br>mysql<br>192.168.5.229 root:123qweasd,.&#x2F;<br>rabbitmq<br>192.168.5.229 guest:guest<br>redis<br>192.168.5.55:6379 无账号密码<br>elasticsearch<br>192.168.5.229:9200 无账号密码<br>开发环境<br>rabbitmq<br>192.168.5.56:5672 无账号密码<br>管理页面<br>192.168.5.56:15672 guest:guest<br>mysql<br>192.168.5.56:3306 root:123456<br>mongo<br>192.168.5.56:27017 rootadmin:123456<br>redis<br>192.168.5.56 无账号密码<br>elasticsearch<br>192.168.5.56:9200 无账号密码</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Net7</title>
      <link href="/post/undefined.html"/>
      <url>/post/undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">专业</span><br></pre></td></tr></table></figure><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p><img src="/img/net7-02.png" alt="image"><br><img src="/img/net7-xn.png" alt="image"><br><img src="/img/net7.png" alt="image"><br><img src="/img/net7-01.png" alt="image"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/undefined.html"/>
      <url>/post/undefined.html</url>
      
        <content type="html"><![CDATA[<h3 id="01"><a href="#01" class="headerlink" title="01"></a>01</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">专业</span><br></pre></td></tr></table></figure><!-- More info: [Writing](https://hexo.io/docs/writing.html) --><h3 id="02"><a href="#02" class="headerlink" title="02"></a>02</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">认真</span><br></pre></td></tr></table></figure><!-- More info: [Server](https://hexo.io/docs/server.html) --><h3 id="03"><a href="#03" class="headerlink" title="03"></a>03</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">耐心</span><br></pre></td></tr></table></figure><!-- More info: [Generating](https://hexo.io/docs/generating.html) --><h3 id="04"><a href="#04" class="headerlink" title="04"></a>04</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">温暖</span><br></pre></td></tr></table></figure><h3 id="图片我还有很多"><a href="#图片我还有很多" class="headerlink" title="图片我还有很多"></a>图片我还有很多</h3><p><img src="/img/net7-02.png" alt="image"><br><img src="/img/net7-xn.png" alt="image"><br><img src="/img/net7.png" alt="image"><br><img src="/img/net7-01.png" alt="image"><br><img src="/img/index-p.jpg" alt="image"><br><img src="/img/index-p2.jpg" alt="image"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
